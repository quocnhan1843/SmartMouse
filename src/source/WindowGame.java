/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package source;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Nguyen Quoc Nhan
 */
public class WindowGame extends javax.swing.JFrame {

    /**
     * Creates new form WindowGame
     */
    public WindowGame() {
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH);
        this.setBackground(Color.YELLOW);
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 892, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 494, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            //System.exit(1);
        }
    }//GEN-LAST:event_formKeyPressed

    
    public void disAble(){
        frame.dispose();
    }
    
    private static final int WAIT_LENGTH = 25;
    private static Game game;
    /**
     * @param args the command line arguments
     */
    JFrame frame =  new JFrame();
    public void main() throws IOException, InterruptedException, URISyntaxException {
        // TODO code application logic here
      
           frame.setBackground(Color.blue);
           frame.setExtendedState(WindowGame.MAXIMIZED_BOTH);
           frame.addWindowListener(new WindowAdapter(){
                public void windowClosing(WindowEvent e) {
                    System.exit(0);
                }
            });
        final DrawImage draw = new DrawImage();
        game = new Game();
        Maze maze = new Maze();
        maze.createMaze();
        game.setMaze(maze);
        game.setLastTime();
        Game.setGameState(Game.GameState.MAINMENU);
        frame.add(draw);
        frame.setVisible(true);
        class GUIUpdate extends Thread {
            @Override
            public void run() {
                try {
                    URL countDownURL = this.getClass().getResource("/sound/count_down.wav");
                    AudioStream countDownSound;
                    countDownSound = new AudioStream(new FileInputStream(new File(countDownURL.toURI())));
                    AudioPlayer.player.start(countDownSound);
                    draw.setCount(3);
                    Thread.sleep(1000);
                    frame.repaint();
                    draw.setCount(2);
                    Thread.sleep(1000);
                    frame.repaint();
                    draw.setCount(1);
                    Thread.sleep(1000);
                    draw.setCount(0);
                    Thread.sleep(500);
                    Game.setGameState(Game.GameState.LOADING);
                } catch (InterruptedException ex) {                    
                } catch (IOException ex) {
                    Logger.getLogger(WindowGame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(WindowGame.class.getName()).log(Level.SEVERE, null, ex);
                }
                game.setLastTime();
                while(game.getGameState() != Game.GameState.GAMEOVER )//&& game.getGameState() != Game.GameState.PASS)
                {
                    if(game.getGameState() == Game.GameState.PASS){
                        try {
                           Thread.sleep(3500);
                        } catch (InterruptedException ex) {
                        }
                        game.restartGame();
                    }
                    game.updateGame();
                    draw.setGame(game);
                    frame.repaint();
                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException ex) {
                    }
                }
                try {
                    AudioStream gameOverSound;
                    URL countDownURL = this.getClass().getResource("/sound/gameover.wav");
                    gameOverSound = new AudioStream(new FileInputStream(new File(countDownURL.toURI())));
                    AudioPlayer.player.start(gameOverSound);
                    Thread.sleep(1);
                } catch (IOException ex) {
                } catch (URISyntaxException ex) {
                } catch (InterruptedException ex) {
                }
                //Window.menu.setVisible(true);
                new Save(game.getMaze().getScore(), game.getLevel()).setVisible(true);
                frame.dispose();
            }
        }
        new GUIUpdate().start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
